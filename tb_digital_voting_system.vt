module tb_digital_voting_system();

    reg master_clk;
    reg reset;
    reg [7:0] voter_id_input;
    reg [3:0] candidate_selection;
    reg submit_vote;
    reg authenticate_voter;
    reg display_results_request;
    reg system_enable;

    wire [7:0] system_status;
    wire [7:0] current_voter_id;
    wire [3:0] current_candidate;
    wire vote_accepted;
    wire vote_rejected;
    wire system_ready;
    wire [15:0] total_votes_cast;
    wire [3:0] winning_candidate_id;
    wire [15:0] winning_candidate_votes;
    wire results_available;
    wire [7:0] error_code;
    wire system_clk_out, display_clk_out, security_clk_out;

    // Instantiate the DUT
    digital_voting_system_top DUT (
        .master_clk(master_clk),
        .reset(reset),
        .voter_id_input(voter_id_input),
        .candidate_selection(candidate_selection),
        .submit_vote(submit_vote),
        .authenticate_voter(authenticate_voter),
        .display_results_request(display_results_request),
        .system_enable(system_enable),
        .system_status(system_status),
        .current_voter_id(current_voter_id),
        .current_candidate(current_candidate),
        .vote_accepted(vote_accepted),
        .vote_rejected(vote_rejected),
        .system_ready(system_ready),
        .total_votes_cast(total_votes_cast),
        .winning_candidate_id(winning_candidate_id),
        .winning_candidate_votes(winning_candidate_votes),
        .results_available(results_available),
        .error_code(error_code),
        .system_clk_out(system_clk_out),
        .display_clk_out(display_clk_out),
        .security_clk_out(security_clk_out)
    );

    // Clock generation: 100MHz clock with 10ns period
    initial begin
        master_clk = 0;
        forever #5 master_clk = ~master_clk;
    end

    initial begin
        // Initialize inputs
        reset = 1;
        voter_id_input = 0;
        candidate_selection = 0;
        submit_vote = 0;
        authenticate_voter = 0;
        display_results_request = 0;
        system_enable = 0;

        // Release reset after 20 ns
        #20 reset = 0;
        #10 system_enable = 1;

        // Authenticate and vote valid voter 0x10 for candidate 2
        voter_id_input = 8'h10;
        authenticate_voter = 1; #10;
        authenticate_voter = 0; #10;

        candidate_selection = 4'd2;
        submit_vote = 1; #10;
        submit_vote = 0; #20;

        // Authenticate and vote valid voter 0x11 for candidate 1
        voter_id_input = 8'h11;
        authenticate_voter = 1; #10;
        authenticate_voter = 0; #10;

        candidate_selection = 4'd1;
        submit_vote = 1; #10;
        submit_vote = 0; #20;

        // Attempt duplicate vote with voter 0x10 (already voted)
        voter_id_input = 8'h10;
        authenticate_voter = 1; #10;
        authenticate_voter = 0; #20;

        // Attempt vote with invalid voter 0xFF
        voter_id_input = 8'hFF;
        authenticate_voter = 1; #10;
        authenticate_voter = 0; #20;

        // Valid voter 0x12 tries to vote an invalid candidate 5
        voter_id_input = 8'h12;
        authenticate_voter = 1; #10;
        authenticate_voter = 0; #10;

        candidate_selection = 4'd5;
        submit_vote = 1; #10;
        submit_vote = 0; #20;

        // Another valid vote by voter 0x13 for candidate 2
        voter_id_input = 8'h13;
        authenticate_voter = 1; #10;
        authenticate_voter = 0; #10;

        candidate_selection = 4'd2;
        submit_vote = 1; #10;
        submit_vote = 0; #20;

        // Request display of results
        display_results_request = 1; #10;
        display_results_request = 0;

        // Wait some time for results to stabilize
        #50;

        $stop;
    end

endmodule
